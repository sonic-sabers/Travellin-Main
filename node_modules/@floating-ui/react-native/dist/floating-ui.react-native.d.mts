import { AlignedPlacement } from '@floating-ui/core';
import { Alignment } from '@floating-ui/core';
import { autoPlacement } from '@floating-ui/core';
import { Axis } from '@floating-ui/core';
import { ClientRectObject } from '@floating-ui/core';
import { ComputePositionConfig } from '@floating-ui/core';
import { ComputePositionReturn } from '@floating-ui/core';
import { Coords } from '@floating-ui/core';
import { detectOverflow } from '@floating-ui/core';
import { Dimensions } from '@floating-ui/core';
import { ElementContext } from '@floating-ui/core';
import { ElementRects } from '@floating-ui/core';
import { flip } from '@floating-ui/core';
import { hide } from '@floating-ui/core';
import { inline } from '@floating-ui/core';
import { Length } from '@floating-ui/core';
import { limitShift } from '@floating-ui/core';
import { Middleware } from '@floating-ui/core';
import { MiddlewareArguments } from '@floating-ui/core';
import { MiddlewareData } from '@floating-ui/core';
import { MiddlewareReturn } from '@floating-ui/core';
import { MiddlewareState } from '@floating-ui/core';
import { offset } from '@floating-ui/core';
import { Padding } from '@floating-ui/core';
import { Placement } from '@floating-ui/core';
import { Platform } from '@floating-ui/core';
import type * as React_2 from 'react';
import { Rect } from '@floating-ui/core';
import { RootBoundary } from '@floating-ui/core';
import { shift } from '@floating-ui/core';
import { Side } from '@floating-ui/core';
import { SideObject } from '@floating-ui/core';
import { size } from '@floating-ui/core';
import { Strategy } from '@floating-ui/core';

export { AlignedPlacement }

export { Alignment }

/**
 * A data provider that provides data to position an inner element of the
 * floating element (usually a triangle or caret) so that it is centered to the
 * reference element.
 * This wraps the core `arrow` middleware to allow React refs as the element.
 * @see https://floating-ui.com/docs/arrow
 */
export declare const arrow: (options: {
    element: any;
    padding?: number | SideObject;
}) => Middleware;

export { autoPlacement }

export { Axis }

export { ClientRectObject }

export { ComputePositionConfig }

export { ComputePositionReturn }

export { Coords }

export { detectOverflow }

export { Dimensions }

export { ElementContext }

export { ElementRects }

export { flip }

export { hide }

export { inline }

export { Length }

export { limitShift }

export { Middleware }

export { MiddlewareArguments }

export { MiddlewareData }

export { MiddlewareReturn }

export { MiddlewareState }

export { offset }

export { Padding }

export { Placement }

export { Platform }

export { Rect }

export { RootBoundary }

export { shift }

export { Side }

export { SideObject }

export { size }

export { Strategy }

export declare function useFloating(options?: UseFloatingOptions): UseFloatingReturn;

export declare interface UseFloatingOptions {
    /**
     * Where to place the floating element relative to the reference element.
     */
    placement?: Placement;
    /**
     * Array of middleware objects to modify the positioning or provide data for
     * rendering.
     */
    middleware?: Array<Middleware | null | undefined | false>;
    sameScrollView?: boolean;
    elements?: {
        reference?: any;
        floating?: any;
        offsetParent?: any;
    };
}

export declare interface UseFloatingReturn extends ComputePositionReturn {
    /**
     * Update the position of the floating element, re-rendering the component
     * if required.
     */
    update: () => void;
    /**
     * Object containing the reference and floating refs and reactive setters.
     */
    refs: {
        /**
         * A React ref to the reference element.
         */
        reference: React_2.MutableRefObject<any>;
        /**
         * A React ref to the floating element.
         */
        floating: React_2.MutableRefObject<any>;
        offsetParent: React_2.MutableRefObject<any>;
        /**
         * A callback to set the reference element (reactive).
         */
        setReference: (node: any) => void;
        /**
         * A callback to set the floating element (reactive).
         */
        setFloating: (node: any) => void;
        setOffsetParent: (node: any) => void;
    };
    elements: {
        reference: any;
        floating: any;
        offsetParent: any;
    };
    /**
     * Pre-configured positioning styles to apply to the floating element.
     */
    floatingStyles: {
        position: 'absolute';
        top: number;
        left: number;
    };
    scrollProps: {
        onScroll: (event: {
            nativeEvent: {
                contentOffset: {
                    x: number;
                    y: number;
                };
            };
        }) => void;
        scrollEventThrottle: 16;
    };
}

export { }
