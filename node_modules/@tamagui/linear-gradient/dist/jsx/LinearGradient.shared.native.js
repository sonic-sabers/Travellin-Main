import {
  normalizeColor,
  styled,
  useProps,
  useTheme
} from "@tamagui/core";
import { YStack } from "@tamagui/stacks";
import {
  LinearGradient as ExpoLinearGradient
} from "./linear-gradient";
const LinearGradient = YStack.styleable(
  (propsIn, ref) => {
    var _a;
    const props = useProps(propsIn), { start, end, colors: colorsProp, locations, children, ...stackProps } = props, theme = useTheme();
    let colors = ((_a = props.colors) == null ? void 0 : _a.map((c) => {
      var _a2;
      return ((_a2 = theme[c]) == null ? void 0 : _a2.get("web")) ?? c;
    })) || [];
    return process.env.NODE_ENV !== "production" && colors.some((c) => {
      const normalized = normalizeColor(c);
      if (!normalized || normalized.startsWith("$"))
        return !0;
    }) && (console.error(
      `LinearGradient: "colors" prop contains invalid color tokens: ${colors} fallback to default colors: ["#000", "#fff"]`
    ), colors = ["#000", "#fff"]), <LinearGradientFrame ref={ref} {...stackProps}>
      <ExpoLinearGradient
        start={start}
        end={end}
        colors={colors}
        locations={locations}
        style={gradientStyle}
      />
      {children}
    </LinearGradientFrame>;
  }
), gradientStyle = {
  position: "absolute",
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  zIndex: 0
}, LinearGradientFrame = styled(YStack, {
  name: "LinearGradient",
  overflow: "hidden",
  position: "relative"
});
export {
  LinearGradient
};
//# sourceMappingURL=LinearGradient.shared.js.map
