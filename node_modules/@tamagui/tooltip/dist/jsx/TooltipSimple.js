import { useDelayGroupContext } from "@floating-ui/react";
import { getSpace } from "@tamagui/get-token";
import { Paragraph } from "@tamagui/text";
import * as React from "react";
import { Tooltip, TooltipGroup } from "./Tooltip";
const TooltipSimple = React.forwardRef(
  ({ label, children, contentProps, disabled, ...tooltipProps }, ref) => {
    let context;
    try {
      context = useDelayGroupContext();
    } catch {
    }
    const child = React.Children.only(children), contents = <Tooltip
      offset={15}
      restMs={0}
      delay={0}
      {...tooltipProps}
      {...disabled ? { open: !1 } : null}
    >
      <Tooltip.Trigger
        {...typeof label == "string" && {
          "aria-label": label
        }}
        asChild="except-style"
      >{ref && React.isValidElement(child) ? React.cloneElement(child, { ref }) : child}</Tooltip.Trigger>
      <Tooltip.Content
        zIndex={1e9}
        enterStyle={{ x: 0, y: -8, opacity: 0, scale: 0.93 }}
        exitStyle={{ x: 0, y: -8, opacity: 0, scale: 0.93 }}
        x={0}
        scale={1}
        y={0}
        elevation="$1"
        opacity={1}
        paddingVertical={getSpace(tooltipProps.size || "$true", {
          shift: -3
        })}
        animateOnly={["transform", "opacity"]}
        animation={[
          "75ms",
          {
            opacity: {
              overshootClamping: !0
            }
          }
        ]}
        {...contentProps}
      >
        <Tooltip.Arrow />
        <Paragraph size="$2">{label}</Paragraph>
      </Tooltip.Content>
    </Tooltip>;
    return context ? contents : <TooltipGroup delay={defaultTooltipDelay}>{contents}</TooltipGroup>;
  }
), defaultTooltipDelay = { open: 3e3, close: 100 };
export {
  TooltipSimple
};
//# sourceMappingURL=TooltipSimple.js.map
